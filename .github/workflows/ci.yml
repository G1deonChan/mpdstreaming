name: CI Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # 运行单元测试
        python -m pytest tests/ -v --tb=short

    - name: Test Docker build (no push)
      run: |
        # 仅测试Docker镜像构建，不推送
        docker build -t test-image .
        docker run --rm test-image python -c "import app; print('App imports successfully')"

    - name: Validate configuration files
      run: |
        # 验证YAML配置文件格式
        python -c "import yaml; yaml.safe_load(open('config.example.yaml'))"
        python -c "import yaml; yaml.safe_load(open('config.yaml'))"

    - name: Check security
      run: |
        # 检查是否有敏感信息泄露
        echo "🔍 检查敏感信息..."
        
        # 检查配置文件中的实际敏感信息（排除示例和文档）
        if grep -r "dckr_pat_\|ghp_\|sk-\|xoxb-" . --exclude-dir=.git --exclude-dir=node_modules 2>/dev/null; then
          echo "❌ 发现API密钥或令牌，请检查配置文件"
          exit 1
        fi
        
        # 检查是否有实际的许可证密钥（32位以上的十六进制字符串）
        if grep -rE "[a-fA-F0-9]{32,}" config.yaml 2>/dev/null | grep -v "example\|sample\|your_key"; then
          echo "❌ 发现可能的真实许可证密钥，请使用示例值"
          exit 1
        fi
        
        # 检查是否有真实的URL（避免示例URL）
        if grep -rE "https://[^[:space:]]+\.(com|net|org)" config.yaml 2>/dev/null | grep -vE "example\.com|sample\.com|demo\."; then
          echo "❌ 发现可能的真实URL，请使用示例URL"
          exit 1
        fi
        
        echo "✅ 安全检查通过"
